import os
import sys
import base64
import requests
import io
from typing import List, Dict, Tuple
from openai import OpenAI
from PIL import Image

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–∞—à–µ–º—É –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from db import ClothingItem, get_db_session


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
try:
    from config import OPENAI_API_KEY
    client = OpenAI(api_key=OPENAI_API_KEY)
except ImportError:
    # –ï—Å–ª–∏ config.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))


def _encode_image_to_base64(image_path: str) -> str:
    """–ö–æ–¥–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ OpenAI API."""
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PIL –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        with Image.open(image_path) as img:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB (—É–±–∏—Ä–∞–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å)
            if img.mode in ('RGBA', 'LA', 'P'):
                img = img.convert('RGB')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä –∫–∞–∫ JPEG
            buffer = io.BytesIO()
            img.save(buffer, format="JPEG", quality=85)
            
            return base64.b64encode(buffer.getvalue()).decode('utf-8')
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
        # Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å
        with open(image_path, "rb") as image_file:
            return base64.b64encode(image_file.read()).decode('utf-8')


def _download_and_encode_image(url: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –∏ –∫–æ–¥–∏—Ä—É–µ—Ç –≤ base64."""
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        content_length = len(response.content)
        print(f"         üìä –†–∞–∑–º–µ—Ä: {content_length} –±–∞–π—Ç")
        
        img = Image.open(io.BytesIO(response.content)).convert("RGB")
        print(f"         üñºÔ∏è  –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {img.size[0]}x{img.size[1]}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        buffer = io.BytesIO()
        img.save(buffer, format="JPEG", quality=85)
        base64_size = len(buffer.getvalue())
        print(f"         üì¶ Base64: {base64_size} –±–∞–π—Ç")
        
        return base64.b64encode(buffer.getvalue()).decode('utf-8')
    except Exception as e:
        print(f"         ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None


def _agent_1_process_request(comment: str, image_path: str = None) -> dict:
    """
    –ê–ì–ï–ù–¢ 1: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ë–î.
    
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:
    - –ö–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏—Å–∫–∞—Ç—å
    - –ö–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    - –¢–∏–ø –ø–æ–∏—Å–∫–∞ (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –∫–æ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–µ)
    """
    print("ü§ñ –ê–ì–ï–ù–¢ 1: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é OpenAI
        prompt = f"""
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∂–µ–Ω—Å–∫–æ–π –æ–¥–µ–∂–¥—ã: "{comment}"
        
        –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
        - "–ë—Ä—é–∫–∏, –±—Ä–∏–¥–∂–∏ –∏ –∫–∞–ø—Ä–∏ –∂–µ–Ω—Å–∫–∏–µ"
        - "–ë–ª—É–∑—ã –∏ —Ä—É–±–∞—à–∫–∏ –∂–µ–Ω—Å–∫–∏–µ" 
        - "–ü–∏–¥–∂–∞–∫–∏, –∂–∞–∫–µ—Ç—ã –∏ –∂–∏–ª–µ—Ç—ã –∂–µ–Ω—Å–∫–∏–µ"
        - "–§—É—Ç–±–æ–ª–∫–∏ –∏ —Ç–æ–ø—ã –∂–µ–Ω—Å–∫–∏–µ"
        - "–Æ–±–∫–∏ –∂–µ–Ω—Å–∫–∏–µ"
        
        –ü—Ä–∞–≤–∏–ª–∞:
        - –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –æ–¥–µ–∂–¥—ã (—Ñ—É—Ç–±–æ–ª–∫–∞, –±—Ä—é–∫–∏, —é–±–∫–∞) ‚Üí search_type: "specific"
        - –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–±—â–∏–π ("—á—Ç–æ –ø–æ–¥–æ–π–¥—ë—Ç", "–¥–æ–ø–æ–ª–Ω–∏ –æ–±—Ä–∞–∑") ‚Üí search_type: "complementary"
        
        –ü—Ä–∏–º–µ—Ä—ã:
        "–ü–æ–¥–±–µ—Ä–∏ —Ñ—É—Ç–±–æ–ª–∫—É" ‚Üí specific, categories: ["–§—É—Ç–±–æ–ª–∫–∏ –∏ —Ç–æ–ø—ã –∂–µ–Ω—Å–∫–∏–µ"]
        "–ß—Ç–æ –ø–æ–¥–æ–π–¥—ë—Ç –∫ —ç—Ç–æ–º—É –æ–±—Ä–∞–∑—É?" ‚Üí complementary, categories: [–≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏]
        
        –û—Ç–≤–µ—Ç –°–¢–†–û–ì–û –≤ JSON:
        {{
            "categories": ["—Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"],
            "keywords": ["–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"],
            "search_type": "specific –∏–ª–∏ complementary",
            "reasoning": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"
        }}"""
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=300,
            temperature=0.1  # –°–Ω–∏–∂–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ JSON
        )
        
        import json
        import re
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        raw_response = response.choices[0].message.content.strip()
        print(f"üîç –ê–ì–ï–ù–¢ 1: –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {raw_response}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
        json_match = re.search(r'\{.*\}', raw_response, re.DOTALL)
        if json_match:
            json_str = json_match.group(0)
            result = json.loads(json_str)
        else:
            raise ValueError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
        
        print(f"üß† –ê–ì–ï–ù–¢ 1 –æ–ø—Ä–µ–¥–µ–ª–∏–ª:")
        print(f"   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {result['categories']}")
        print(f"   üî§ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {result['keywords']}")
        print(f"   üéØ –¢–∏–ø –ø–æ–∏—Å–∫–∞: {result['search_type']}")
        print(f"   üí≠ –õ–æ–≥–∏–∫–∞: {result['reasoning']}")
        
        return {
            "requested_categories": result["categories"],
            "search_keywords": result["keywords"],
            "search_type": result["search_type"],
            "reasoning": result["reasoning"],
            "original_comment": comment
        }
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –ê–ì–ï–ù–¢ 1: –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞, –∏—Å–ø–æ–ª—å–∑—É—é fallback: {e}")
        
        # Fallback: —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        comment_lower = comment.lower()
        
        category_keywords = {
            "–ë—Ä—é–∫–∏, –±—Ä–∏–¥–∂–∏ –∏ –∫–∞–ø—Ä–∏ –∂–µ–Ω—Å–∫–∏–µ": ["–±—Ä—é–∫–∏", "–¥–∂–∏–Ω—Å—ã", "—à—Ç–∞–Ω—ã", "–ª–µ–≥–∏–Ω—Å—ã", "–∫–∞–ø—Ä–∏", "–±—Ä–∏–¥–∂–∏"],
            "–ë–ª—É–∑—ã –∏ —Ä—É–±–∞—à–∫–∏ –∂–µ–Ω—Å–∫–∏–µ": ["–±–ª—É–∑–∫–∞", "—Ä—É–±–∞—à–∫–∞", "–±–ª—É–∑–∞", "—Å–æ—Ä–æ—á–∫–∞"],
            "–ü–∏–¥–∂–∞–∫–∏, –∂–∞–∫–µ—Ç—ã –∏ –∂–∏–ª–µ—Ç—ã –∂–µ–Ω—Å–∫–∏–µ": ["–ø–∏–¥–∂–∞–∫", "–∂–∞–∫–µ—Ç", "–∂–∏–ª–µ—Ç", "–∫–∞—Ä–¥–∏–≥–∞–Ω", "–±–ª–µ–π–∑–µ—Ä"],
            "–§—É—Ç–±–æ–ª–∫–∏ –∏ —Ç–æ–ø—ã –∂–µ–Ω—Å–∫–∏–µ": ["—Ñ—É—Ç–±–æ–ª–∫–∞", "—Ñ—É—Ç–±–æ–ª–∫—É", "—Ç–æ–ø", "–º–∞–π–∫–∞", "—Ç–∏—à–∫–∞"],
            "–Æ–±–∫–∏ –∂–µ–Ω—Å–∫–∏–µ": ["—é–±–∫–∞", "—é–±–∫—É", "–º–∏–Ω–∏", "–º–∞–∫—Å–∏"]
        }
        
        mentioned_categories = []
        for category, keywords in category_keywords.items():
            for keyword in keywords:
                if keyword in comment_lower:
                    mentioned_categories.append(category)
                    break
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
        if mentioned_categories:
            search_type = "specific"
            print(f"üéØ Fallback: –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {mentioned_categories}")
        else:
            mentioned_categories = list(category_keywords.keys())
            search_type = "complementary"
            print(f"üîÑ Fallback: –ö–æ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        
        return {
            "requested_categories": mentioned_categories,
            "search_keywords": comment_lower.split(),
            "search_type": search_type,
            "reasoning": "Fallback –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º",
            "original_comment": comment
        }


def _agent_2_validate_items(original_image_path: str, candidate_items: List[ClothingItem], user_comment: str, search_info: dict) -> List[ClothingItem]:
    """
    –ê–ì–ï–ù–¢ 2: –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ —Ñ–æ—Ç–æ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI Vision –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏–∑ –ë–î, –≤—ã–±–∏—Ä–∞—è –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ —Å—Ç–∏–ª—é –∏ —Å–æ—á–µ—Ç–∞–µ–º–æ—Å—Ç–∏.
    """
    print(f"ü§ñ –ê–ì–ï–ù–¢ 2: –í–∞–ª–∏–¥–∏—Ä—É—é —Ç–æ–≤–∞—Ä—ã –ø–æ —Ñ–æ—Ç–æ...")
    print(f"   üéØ –¢–∏–ø –ø–æ–∏—Å–∫–∞: {search_info.get('search_type')}")
    print(f"   üí≠ –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞: {search_info.get('reasoning')}")
    
    try:
        # –ö–æ–¥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        original_base64 = _encode_image_to_base64(original_image_path)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for item in candidate_items:
            category = item.category
            if category not in categories:
                categories[category] = []
            categories[category].append(item)
        
        print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")
        
        best_items = []
        
        for category, items in categories.items():
            print(f"üîç –í–∞–ª–∏–¥–∏—Ä—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category} ({len(items)} —Ç–æ–≤–∞—Ä–æ–≤)")
            
            if len(items) == 1:
                # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –æ–¥–∏–Ω, –±–µ—Ä—ë–º –µ–≥–æ
                print(f"   ‚úÖ –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä: {items[0].name[:40]}... ({items[0].price}‚ÇΩ)")
                best_items.append(items[0])
                continue
            
            # –£–º–Ω—ã–π –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            max_items_to_compare = min(5, len(items))  # –î–æ 5 —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–∫—Å–∏–º—É–º
            
            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –º–Ω–æ–≥–æ, –±–µ—Ä—ë–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é –≤—ã–±–æ—Ä–∫—É
            if len(items) > max_items_to_compare:
                # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ (—Å–∞–º—ã–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ) + —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑ —Å–µ—Ä–µ–¥–∏–Ω—ã –∏ –∫–æ–Ω—Ü–∞
                items_to_compare = items[:2]  # –ü–µ—Ä–≤—ã–µ 2 —Å–∞–º—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö
                if len(items) > 10:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å–µ—Ä–µ–¥–∏–Ω—ã –∏ –∫–æ–Ω—Ü–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                    mid_idx = len(items) // 2
                    items_to_compare.extend([items[mid_idx], items[-2], items[-1]])
                else:
                    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ, –±–µ—Ä—ë–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
                    step = len(items) // max_items_to_compare
                    for i in range(2, max_items_to_compare):
                        idx = min(i * step, len(items) - 1)
                        items_to_compare.append(items[idx])
                
                # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
                seen = set()
                unique_items = []
                for item in items_to_compare:
                    if item.id not in seen:
                        seen.add(item.id)
                        unique_items.append(item)
                items_to_compare = unique_items[:max_items_to_compare]
            else:
                items_to_compare = items[:max_items_to_compare]
            
            print(f"   üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±–æ—Ä–∞: {len(items)} —Ç–æ–≤–∞—Ä–æ–≤ ‚Üí {len(items_to_compare)} –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞")
            print(f"   üìã –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")
            for i, item in enumerate(items_to_compare, 1):
                print(f"      {i}. {item.name[:35]}... ({item.price}‚ÇΩ)")
                print(f"         üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {item.image_url[:50] if item.image_url else '–ù–µ—Ç'}...")
            
            # –°–æ–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            candidate_images = []
            valid_items = []
            
            print(f"   üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤...")
            for i, item in enumerate(items_to_compare, 1):
                if item.image_url:
                    print(f"      üì• –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i}: {item.image_url[:60]}...")
                    item_base64 = _download_and_encode_image(item.image_url)
                    if item_base64:
                        candidate_images.append(item_base64)
                        valid_items.append(item)
                        print(f"      ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i} –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    else:
                        print(f"      ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i}")
                else:
                    print(f"      ‚ö†Ô∏è  –£ —Ç–æ–≤–∞—Ä–∞ {i} –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
            if not candidate_images:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
                print(f"      ‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤—ã–±–∏—Ä–∞—é –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä")
                print(f"      ‚úÖ –í—ã–±—Ä–∞–Ω: {items[0].name[:40]}... ({items[0].price}‚ÇΩ)")
                best_items.append(items[0])
                continue
            
            print(f"   üéØ –ì–æ—Ç–æ–≤ –∫ AI –∞–Ω–∞–ª–∏–∑—É: {len(candidate_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
            search_type = search_info.get('search_type', 'specific')
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
            num_items = len(valid_items)
            items_list = []
            valid_numbers = []
            
            for i, item in enumerate(valid_items, 1):
                items_list.append(f"–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï {i+1}: –¢–æ–≤–∞—Ä ‚Ññ{i} - {item.name[:40]}")
                valid_numbers.append(str(i))
            
            items_description = "\n                ".join(items_list)
            valid_range = ", ".join(valid_numbers)
            
            if search_type == 'specific':
                prompt = f"""
                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –æ–¥–µ–∂–¥—ã: "{user_comment}"
                
                –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï 1: –ò—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ù–ï –¥–ª—è –≤—ã–±–æ—Ä–∞)
                {items_description}
                
                –í—ã–±–µ—Ä–∏ –ù–û–ú–ï–† –¢–û–í–ê–†–ê ({valid_range}), –∫–æ—Ç–æ—Ä—ã–π –ª—É—á—à–µ –≤—Å–µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É.
                –£—á–∏—Ç—ã–≤–∞–π —Å—Ç–∏–ª—å, —Ü–≤–µ—Ç, —Ñ–∞—Å–æ–Ω –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞.
                
                –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–æ–π —Ç–æ–≤–∞—Ä–∞: {valid_range}
                """
            else:
                prompt = f"""
                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –¥–æ–ø–æ–ª–Ω—è—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã –∫ —Å–≤–æ–µ–º—É –æ–±—Ä–∞–∑—É: "{user_comment}"
                
                –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï 1: –ò—Å—Ö–æ–¥–Ω—ã–π –æ–±—Ä–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ù–ï –¥–ª—è –≤—ã–±–æ—Ä–∞)
                {items_description}
                
                –í—ã–±–µ—Ä–∏ –ù–û–ú–ï–† –¢–û–í–ê–†–ê ({valid_range}), –∫–æ—Ç–æ—Ä—ã–π –ª—É—á—à–µ –≤—Å–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –æ–±—Ä–∞–∑.
                –£—á–∏—Ç—ã–≤–∞–π —Å–æ—á–µ—Ç–∞–µ–º–æ—Å—Ç—å –ø–æ —Å—Ç–∏–ª—é, —Ü–≤–µ—Ç–∞–º –∏ –æ–±—â—É—é –≥–∞—Ä–º–æ–Ω–∏—é –æ–±—Ä–∞–∑–∞.
                
                –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–æ–π —Ç–æ–≤–∞—Ä–∞: {valid_range}
                """
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            content = [{"type": "text", "text": prompt}]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            content.append({
                "type": "image_url",
                "image_url": {"url": f"data:image/jpeg;base64,{original_base64}"}
            })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            for img_base64 in candidate_images:
                content.append({
                    "type": "image_url", 
                    "image_url": {"url": f"data:image/jpeg;base64,{img_base64}"}
                })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
            print(f"   üß† –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ OpenAI Vision...")
            print(f"      üì§ –ú–æ–¥–µ–ª—å: gpt-4o-mini")
            print(f"      üì§ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(content) - 1} (–≤–∫–ª—é—á–∞—è –∏—Å—Ö–æ–¥–Ω–æ–µ)")
            print(f"      üì§ –¢–∏–ø –ø–æ–∏—Å–∫–∞: {search_type}")
            print(f"   üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è AI:")
            print(f"      üñºÔ∏è  1. –ò—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ù–ï –¥–ª—è –≤—ã–±–æ—Ä–∞)")
            for i, item in enumerate(valid_items, 1):
                print(f"      üñºÔ∏è  {i+1}. –¢–æ–≤–∞—Ä ‚Ññ{i}: {item.name[:35]}...")
            
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": content}],
                max_tokens=5
            )
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            choice = response.choices[0].message.content.strip()
            print(f"   ü§ñ AI –æ—Ç–≤–µ—Ç–∏–ª: '{choice}'")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞–º
            valid_range = ", ".join([str(i) for i in range(1, len(valid_items) + 1)])
            print(f"   üîç –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤—ã–±–æ—Ä–∞ AI:")
            print(f"      AI –æ—Ç–≤–µ—Ç–∏–ª: '{choice}' (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å {valid_range})")
            for i, item in enumerate(valid_items, 1):
                marker = "üëâ" if choice == str(i) else "  "
                print(f"      {marker} –¢–æ–≤–∞—Ä ‚Ññ{i}: {item.name[:30]}... ({item.price}‚ÇΩ)")
            
            try:
                choice_num = int(choice)
                
                # –ï—Å–ª–∏ AI –æ—Ç–≤–µ—Ç–∏–ª –Ω–æ–º–µ—Ä–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (2, 3, 4, 5, 6), –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (1, 2, 3, 4, 5)
                if choice_num >= 2 and choice_num <= len(valid_items) + 1:
                    choice_idx = choice_num - 2  # 2->0, 3->1, 4->2, 5->3, 6->4
                    print(f"   üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –Ω–æ–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {choice_num} –≤ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ {choice_idx + 1}")
                # –ï—Å–ª–∏ AI –æ—Ç–≤–µ—Ç–∏–ª –Ω–æ–º–µ—Ä–æ–º —Ç–æ–≤–∞—Ä–∞ (1, 2, 3, 4, 5)
                elif choice_num >= 1 and choice_num <= len(valid_items):
                    choice_idx = choice_num - 1  # 1->0, 2->1, 3->2, 4->3, 5->4
                    print(f"   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ {choice_num} –∫–∞–∫ –µ—Å—Ç—å")
                else:
                    choice_idx = -1  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä
                
                if 0 <= choice_idx < len(valid_items):
                    selected_item = valid_items[choice_idx]
                    best_items.append(selected_item)
                    print(f"   ‚úÖ –í–´–ë–†–ê–ù: {selected_item.name[:40]}... ({selected_item.price}‚ÇΩ)")
                else:
                    fallback_item = valid_items[0]
                    best_items.append(fallback_item)
                    print(f"   ‚ö†Ô∏è  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä '{choice}', –≤–∑—è—Ç –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä")
                    print(f"   ‚úÖ –í–´–ë–†–ê–ù: {fallback_item.name[:40]}... ({fallback_item.price}‚ÇΩ)")
            except (ValueError, IndexError):
                fallback_item = valid_items[0]
                best_items.append(fallback_item)
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—ã–±–æ—Ä–∞ '{choice}', –≤–∑—è—Ç –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä")
                print(f"   ‚úÖ –í–´–ë–†–ê–ù: {fallback_item.name[:40]}... ({fallback_item.price}‚ÇΩ)")
        
        print(f"üéØ –ê–ì–ï–ù–¢ 2: –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - {len(best_items)} —Ç–æ–≤–∞—Ä–æ–≤:")
        for i, item in enumerate(best_items, 1):
            print(f"   {i}. {item.name[:45]}... ({item.price}‚ÇΩ)")
            print(f"      üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.category}")
        
        return best_items
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        # Fallback: –ø–æ –æ–¥–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = {}
        for item in candidate_items:
            category = item.category
            if category not in categories:
                categories[category] = item
        return list(categories.values())


def _search_items_by_request(request_info: dict) -> List[ClothingItem]:
    """
    –ò—â–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü—Ä–æ—Å—Ç–æ–π –∏ –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    session = get_db_session()
    try:
        from sqlalchemy import or_
        
        categories = request_info.get("requested_categories", [])
        keywords = request_info.get("search_keywords", [])
        
        print(f"üéØ –ò—â—É —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö: {categories}")
        print(f"üî§ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        query = session.query(ClothingItem)
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∏—Å–∫–∞: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –Ω–∞–¥ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        all_conditions = []
        
        search_type = request_info.get("search_type", "specific")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞
        if search_type == "specific":  # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            print(f"üéØ –¢–æ—á–µ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {categories}")
            category_conditions = []
            for category in categories:
                category_conditions.append(ClothingItem.category.ilike(f"%{category}%"))
            
            # –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            all_conditions = category_conditions
            
        else:  # –ö–æ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫
            print(f"üîç –ö–æ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {categories}")
            # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if categories:
                for category in categories:
                    all_conditions.append(ClothingItem.category.ilike(f"%{category}%"))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            relevant_keywords = [kw for kw in keywords if len(kw) > 2 and kw not in ['–ø–æ–¥–±–µ—Ä–∏', '–Ω–∞–π–¥–∏', '–ø–æ–∫–∞–∂–∏']]
            if relevant_keywords:
                print(f"üîç –î–æ–±–∞–≤–ª—è—é –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {relevant_keywords}")
                for keyword in relevant_keywords:
                    like_pattern = f"%{keyword}%"
                    all_conditions.extend([
                        ClothingItem.name.ilike(like_pattern),
                        ClothingItem.description.ilike(like_pattern),
                        ClothingItem.category.ilike(like_pattern)
                    ])
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è —á–µ—Ä–µ–∑ OR
        if all_conditions:
            print(f"üîç –í—Å–µ–≥–æ —É—Å–ª–æ–≤–∏–π –ø–æ–∏—Å–∫–∞: {len(all_conditions)}")
            query = query.filter(or_(*all_conditions))
        else:
            print("‚ö†Ô∏è  –ù–µ—Ç —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤—Å–µ —Ç–æ–≤–∞—Ä—ã")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        items = query.limit(30).all()
        
        print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(items)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É")
        
        # Fallback: –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if not items and categories:
            print("üîÑ Fallback: –∏—â—É —Ç–æ–ª—å–∫–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
            fallback_query = session.query(ClothingItem)
            category_conditions = []
            for category in categories:
                print(f"üîç Fallback –∏—â–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é: '{category}'")
                category_conditions.append(ClothingItem.category.ilike(f"%{category}%"))
            
            if category_conditions:
                fallback_query = fallback_query.filter(or_(*category_conditions))
                
                # –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º SQL –∑–∞–ø—Ä–æ—Å
                print(f"üîç SQL –∑–∞–ø—Ä–æ—Å: {fallback_query}")
                
                items = fallback_query.limit(30).all()
                print(f"üì¶ Fallback –Ω–∞—à—ë–ª {len(items)} —Ç–æ–≤–∞—Ä–æ–≤")
                
                # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë 0, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–≤—Å–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                if not items:
                    print("üîç –ü—Ä–æ–±—É—é —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å...")
                    simple_query = session.query(ClothingItem).filter(
                        ClothingItem.category.ilike("%–ü–∏–¥–∂–∞–∫–∏%")
                    )
                    simple_items = simple_query.limit(5).all()
                    print(f"üì¶ –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞—à—ë–ª {len(simple_items)} —Ç–æ–≤–∞—Ä–æ–≤")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ
                    total_count = session.query(ClothingItem).count()
                    print(f"üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {total_count}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞
                    first_items = session.query(ClothingItem).limit(3).all()
                    print(f"üìã –ü–µ—Ä–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ:")
                    for i, item in enumerate(first_items, 1):
                        print(f"   {i}. {item.name} | –ö–∞—Ç–µ–≥–æ—Ä–∏—è: '{item.category}'")
                    
                    if simple_items:
                        items = simple_items
        
        return items
        
    finally:
        session.close()


def find_similar_items(
    image_path: str,
    top_n: int = 5,
    comment: str = "",
) -> List[ClothingItem]:
    """
    –î–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –¥–≤—É–º—è AI –∞–≥–µ–Ω—Ç–∞–º–∏:
    
    –ê–ì–ï–ù–¢ 1: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ë–î
    –ê–ì–ï–ù–¢ 2: –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ —Ñ–æ—Ç–æ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–µ
    """
    print(f"üõçÔ∏è  –î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π AI –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞—á–∞–ª—Å—è...")
    print(f"üì∏ –§–æ—Ç–æ: {image_path}")
    print(f"üí≠ –ó–∞–ø—Ä–æ—Å: '{comment}'")
    print("=" * 50)
    
    # –≠–¢–ê–ü 1: –ê–ì–ï–ù–¢ 1 –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("üî• –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    search_info = _agent_1_process_request(comment, image_path)
    print(f"üìã –û–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {search_info['requested_categories']}")
    print(f"üéØ –¢–∏–ø –ø–æ–∏—Å–∫–∞: {search_info['search_type']}")
    
    # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ê–ì–ï–ù–¢–ê 1
    candidate_items = _search_items_by_request(search_info)
    
    if not candidate_items:
        print("üòû –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return []
    
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(candidate_items)}")
    print("=" * 50)
    
    # –≠–¢–ê–ü 2: –ê–ì–ï–ù–¢ 2 –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ —Ñ–æ—Ç–æ
    print("üî• –≠–¢–ê–ü 2: AI –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ —Ñ–æ—Ç–æ")
    try:
        best_items = _agent_2_validate_items(image_path, candidate_items, comment, search_info)
    except Exception as e:
        print(f"‚ö†Ô∏è  –ê–ì–ï–ù–¢ 2: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        # Fallback: –ø–æ –æ–¥–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = {}
        for item in candidate_items:
            category = item.category
            if category not in categories:
                categories[category] = item
        best_items = list(categories.values())
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    final_items = best_items[:top_n]
    
    print("=" * 50)
    print(f"‚ú® –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {len(final_items)} —Ç–æ–≤–∞—Ä–æ–≤")
    for i, item in enumerate(final_items, 1):
        print(f"   {i}. {item.name[:35]}... ({item.price}‚ÇΩ)")
        print(f"      {item.category}")
    
    return final_items
